// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model;

namespace Model.Migrations
{
    [DbContext(typeof(PAShopDbContext))]
    partial class PAShopDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Model.Models.Basket", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid?>("OwnerId");

                    b.Property<string>("State");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("Model.Models.BasketItem", b =>
                {
                    b.Property<Guid>("BasketId");

                    b.Property<Guid>("ItemId");

                    b.HasKey("BasketId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("BasketItem");
                });

            modelBuilder.Entity("Model.Models.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ItemId");

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("Model.Models.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreatorId");

                    b.Property<string>("Description");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Label");

                    b.Property<float>("Price_HT");

                    b.Property<int>("Priority");

                    b.Property<int>("ShippingPrice");

                    b.Property<string>("ShortDesc");

                    b.Property<int>("Tva");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Model.Models.StockMovement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<Guid?>("ItemId");

                    b.Property<Guid?>("LastInventoryId");

                    b.Property<DateTime>("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("LastInventoryId");

                    b.ToTable("StockMovements");
                });

            modelBuilder.Entity("Model.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("State");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Model.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Login");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("Model.Models.Vendor", b =>
                {
                    b.HasBaseType("Model.Models.User");

                    b.Property<string>("Brand");

                    b.Property<string>("Siret");

                    b.ToTable("Vendor");

                    b.HasDiscriminator().HasValue("Vendor");
                });

            modelBuilder.Entity("Model.Models.Basket", b =>
                {
                    b.HasOne("Model.Models.Transaction", "Transaction")
                        .WithOne("Order")
                        .HasForeignKey("Model.Models.Basket", "Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Models.User", "Owner")
                        .WithMany("Baskets")
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("Model.Models.BasketItem", b =>
                {
                    b.HasOne("Model.Models.Basket", "Basket")
                        .WithMany("Items")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Models.Item", "Item")
                        .WithMany("Baskets")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.Models.Inventory", b =>
                {
                    b.HasOne("Model.Models.Item", "Item")
                        .WithMany("Inventories")
                        .HasForeignKey("ItemId");
                });

            modelBuilder.Entity("Model.Models.Item", b =>
                {
                    b.HasOne("Model.Models.Vendor", "Creator")
                        .WithMany("CreatedItems")
                        .HasForeignKey("CreatorId");
                });

            modelBuilder.Entity("Model.Models.StockMovement", b =>
                {
                    b.HasOne("Model.Models.Item", "Item")
                        .WithMany("StockMovements")
                        .HasForeignKey("ItemId");

                    b.HasOne("Model.Models.Inventory", "LastInventory")
                        .WithMany("StockMovements")
                        .HasForeignKey("LastInventoryId");
                });

            modelBuilder.Entity("Model.Models.Transaction", b =>
                {
                    b.HasOne("Model.Models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
